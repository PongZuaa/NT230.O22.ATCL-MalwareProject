import os
import sys
import concurrent.futures
import angr
from functools import lru_cache
import argparse

# Function to create an angr project
@lru_cache(maxsize=None)
def create_project(pe_file_path, architecture='x86'):
    try:
        project = angr.Project(pe_file_path, arch=architecture, auto_load_libs=False)
        return project
    except Exception as e:
        print(f"Error creating project for {pe_file_path}: {e}")
        return None

# Function to perform CFG analysis
@lru_cache(maxsize=None)
def perform_cfg_analysis(project):
    try:
        cfg = project.analyses.CFGEmulated(keep_state=True)
        return cfg
    except Exception as e:
        print(f"Error performing CFG analysis: {e}")
        return None

# Function to extract CFG info
def extract_cfg_info(cfg_emulated, result_file):
    try:
        graph = cfg_emulated.graph
        with open(result_file, 'a') as result_file:
            # Extract node info
            nodes = list(graph.nodes(data=True))
            for node in nodes:
                node_address = node[0]
                node_data = node[1]
                result_file.write(f"Node Address: {node_address}, Node Data: {node_data}\n")

            # Extract edge info
            edges = list(graph.edges(data=True))
            for edge in edges:
                source, target, edge_data = edge
                result_file.write(f"Edge: {source} -> {target}, Edge Data: {edge_data}\n")
    except Exception as e:
        print(f"Error extracting CFG info: {e}")

# Function to process a single PE file
def process_pe_file(pe_file_path, result_directory):
    project = create_project(pe_file_path)

    if project is None:
        return
    
    cfg_emulated = perform_cfg_analysis(project)
    if cfg_emulated is None:
        return

    # Extract CFG info to result file
    extract_cfg_info(cfg_emulated, result_directory+"//graph.txt")

# Main function
def main():
    parser = argparse.ArgumentParser(description='Trích xuất thông tin file PE từ thư mục hoặc tệp.')
    parser.add_argument('path', help='Đường dẫn đến thư mục hoặc tệp chứa các file PE')
    parser.add_argument('result_path', help='Đường dẫn đến thư mục chứa file kết quả sau khi trích xuất')

    args = parser.parse_args()
    path = args.path
    result_path = args.result_path

    folder_path = path
    result_directory = result_path
    os.makedirs(result_directory, exist_ok=True)

    process_pe_file(folder_path, result_directory)

if __name__ == "__main__":
    main()