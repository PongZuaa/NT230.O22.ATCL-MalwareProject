from flask import Flask, request, render_template, send_file, jsonify
import os
from werkzeug.utils import secure_filename
import combine
import pandas as pd
import glob

app = Flask(__name__)

name_folder_after_extract = 'result_after_extract'

# Tạo thư mục lưu kết quả file sau khi trích xuất
temp_dir = os.path.join(app.root_path, name_folder_after_extract)
if not os.path.exists(temp_dir):
    os.makedirs(temp_dir)

@app.route('/')
def home():
    # Lấy đường dẫn hiện tại của script đang chạy
    current_path = os.path.dirname(os.path.abspath(__file__))

    # Tạo đường dẫn pattern để tìm các file .exe
    pattern = os.path.join(current_path, "*.exe")

    # Lặp qua từng file .exe và xóa chúng
    for exe_file in glob.glob(pattern):
        try:
            os.remove(exe_file)
            print(f"Đã xóa: {exe_file}")
        except Exception as e:
            print(f"Không thể xóa {exe_file}. Lỗi: {e}")
    temp_file = os.path.join(current_path, 'temp.csv')
    # Kiểm tra xem file temp.csv có tồn tại hay không và xóa nó
    if os.path.exists(temp_file):
        try:
            os.remove(temp_file)
            print(f"Đã xóa: {temp_file}")
        except Exception as e:
            print(f"Không thể xóa {temp_file}. Lỗi: {e}")
    else:
        print("File temp.csv không tồn tại.")
    return render_template('greeting.html')

@app.route('/upload')
def extract():
    return render_template('upload.html')

@app.route('/extract', methods=['POST'])
def extract_feature():
    file_exe = request.files['file_exe']
        
    if 'file_exe' not in request.files:
        return 'Không tìm thấy file!'
    
    file_exe = request.files['file_exe']

    if file_exe.filename == '':
        return 'File không được chọn!'
    
    # Lấy loại file từ request
    file_type = request.form['file_type']
    
    # Lưu file exe vào thư mục tạm thời
    file_exe_path = os.path.join(app.root_path, file_exe.filename)
    
    file_exe.save(file_exe_path)

    # Thực hiện các quá trình xử lý
    os.system(f'python Feature.py {file_exe.filename} {file_exe_path} {temp_dir} {file_type}')
    os.system(f'python Graph.py {file_exe_path} {temp_dir}')

    # Đường dẫn đến file CSV và file đồ thị
    csv_file_path = os.path.join(app.root_path, name_folder_after_extract, 'output_dataset_header.csv')
    graph_file_path = os.path.join(app.root_path, name_folder_after_extract, 'graph.txt')

    # Đọc file CSV vào một DataFrame
    df = pd.read_csv(csv_file_path)

    # Lấy giá trị đầu tiên từ cột 'Type'
    file_type = df['Type'].iloc[0]
    
    # Gọi hàm dự đoán từ combine.py
    result = combine.predict(csv_file_path, graph_file_path, file_type)
    
    # Gọi hàm dự đoán từ combine.py và truyền kết quả trực tiếp vào render_template

    return render_template('predict.html', **result)

@app.route('/download/csv')
def download_csv():
    # Xây dựng đường dẫn đầy đủ của file CSV
    csv_file_path = '.\\'+name_folder_after_extract+'\\output_dataset_header.csv'
    return send_file(csv_file_path, as_attachment=True)

@app.route('/download/graph')
def download_graph():
    # Xây dựng đường dẫn đầy đủ của file đồ thị
    graph_file_path = '.\\'+name_folder_after_extract+'\\graph.txt'
    return send_file(graph_file_path, as_attachment=True)


if __name__ == '__main__':
    app.run(debug=True)
